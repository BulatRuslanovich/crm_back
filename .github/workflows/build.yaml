name: Build Validation

on:
  push:
    branches: [master]
    paths: ['**.cs', '**.csproj']
  pull_request:
    branches: [master]
    paths: ['**.cs', '**.csproj']

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIG: 'Release'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check code formatting
      run: dotnet format --verify-no-changes --severity warn
    
    - name: Build
      run: dotnet build --configuration ${{ env.BUILD_CONFIG }} --no-restore
    
    - name: Run tests with coverage
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
    
    - name: Security scan (dependencies)
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
        if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
          echo "::warning::Vulnerable packages detected!"
        fi
      continue-on-error: true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install code analyzers
      run: dotnet tool install -g dotnet-outdated-tool
    
    - name: Check outdated packages
      run: dotnet outdated --fail-on-updates
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()
    steps:
    - name: Send Telegram notification
      uses: appleboy/telegram-action@v1.0.0
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ${{ needs.build-and-test.result == 'success' && needs.code-quality.result == 'success' && '✅ Build successful!' || '❌ Build failed!' }}
          
          Build: ${{ needs.build-and-test.result }}
          Code Quality: ${{ needs.code-quality.result }}
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.event.head_commit.message }}
          Author: ${{ github.actor }}
          
          Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}